/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Speechify from "../../../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization/index";
import * as errors from "../../../../../../errors/index";
import * as fs from "fs";
import * as stream from "stream";

export declare namespace Voices {
    export interface Options {
        environment?: core.Supplier<environments.SpeechifyEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Voices {
    constructor(protected readonly _options: Voices.Options = {}) {}

    /**
     * Gets the list of voices available for the user
     *
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Speechify.tts.NotFoundError}
     * @throws {@link Speechify.tts.InternalServerError}
     *
     * @example
     *     await client.tts.voices.list()
     */
    public async list(requestOptions?: Voices.RequestOptions): Promise<Speechify.tts.GetVoice[]> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SpeechifyEnvironment.Default,
                "v1/voices",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@speechify/api",
                "X-Fern-SDK-Version": "0.0.5",
                "User-Agent": "@speechify/api/0.0.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.tts.voices.list.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Speechify.tts.NotFoundError(_response.error.body);
                case 500:
                    throw new Speechify.tts.InternalServerError(_response.error.body);
                default:
                    throw new errors.SpeechifyError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SpeechifyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SpeechifyTimeoutError("Timeout exceeded when calling GET /v1/voices.");
            case "unknown":
                throw new errors.SpeechifyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create a personal (cloned) voice for the user
     *
     * @param {Speechify.tts.VoicesCreateRequest} request
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Speechify.tts.BadRequestError}
     * @throws {@link Speechify.tts.PaymentRequiredError}
     * @throws {@link Speechify.tts.InternalServerError}
     *
     * @example
     *     await client.tts.voices.create({
     *         sample: fs.createReadStream("/path/to/your/file"),
     *         name: "name",
     *         gender: "male",
     *         consent: "consent"
     *     })
     */
    public async create(
        request: Speechify.tts.VoicesCreateRequest,
        requestOptions?: Voices.RequestOptions,
    ): Promise<Speechify.tts.CreatedVoice> {
        const _request = await core.newFormData();
        _request.append("name", request.name);
        if (request.locale != null) {
            _request.append("locale", request.locale);
        }

        _request.append(
            "gender",
            serializers.tts.VoicesCreateRequestGender.jsonOrThrow(request.gender, { unrecognizedObjectKeys: "strip" }),
        );
        await _request.appendFile("sample", request.sample);
        if (request.avatar != null) {
            await _request.appendFile("avatar", request.avatar);
        }

        _request.append("consent", request.consent);
        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SpeechifyEnvironment.Default,
                "v1/voices",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@speechify/api",
                "X-Fern-SDK-Version": "0.0.5",
                "User-Agent": "@speechify/api/0.0.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.tts.CreatedVoice.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Speechify.tts.BadRequestError(_response.error.body);
                case 402:
                    throw new Speechify.tts.PaymentRequiredError(_response.error.body);
                case 500:
                    throw new Speechify.tts.InternalServerError(_response.error.body);
                default:
                    throw new errors.SpeechifyError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SpeechifyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SpeechifyTimeoutError("Timeout exceeded when calling POST /v1/voices.");
            case "unknown":
                throw new errors.SpeechifyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete a personal (cloned) voice
     *
     * @param {string} id - The ID of the voice to delete
     * @param {Voices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Speechify.tts.BadRequestError}
     * @throws {@link Speechify.tts.NotFoundError}
     * @throws {@link Speechify.tts.InternalServerError}
     *
     * @example
     *     await client.tts.voices.delete("id")
     */
    public async delete(id: string, requestOptions?: Voices.RequestOptions): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SpeechifyEnvironment.Default,
                `v1/voices/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@speechify/api",
                "X-Fern-SDK-Version": "0.0.5",
                "User-Agent": "@speechify/api/0.0.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Speechify.tts.BadRequestError(_response.error.body);
                case 404:
                    throw new Speechify.tts.NotFoundError(_response.error.body);
                case 500:
                    throw new Speechify.tts.InternalServerError(_response.error.body);
                default:
                    throw new errors.SpeechifyError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SpeechifyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SpeechifyTimeoutError("Timeout exceeded when calling DELETE /v1/voices/{id}.");
            case "unknown":
                throw new errors.SpeechifyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Download a personal (cloned) voice sample
     * @throws {@link Speechify.tts.BadRequestError}
     * @throws {@link Speechify.tts.UnauthorizedError}
     * @throws {@link Speechify.tts.NotFoundError}
     * @throws {@link Speechify.tts.InternalServerError}
     */
    public async downloadSample(id: string, requestOptions?: Voices.RequestOptions): Promise<stream.Readable> {
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SpeechifyEnvironment.Default,
                `v1/voices/${encodeURIComponent(id)}/sample`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@speechify/api",
                "X-Fern-SDK-Version": "0.0.5",
                "User-Agent": "@speechify/api/0.0.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Speechify.tts.BadRequestError(_response.error.body);
                case 401:
                    throw new Speechify.tts.UnauthorizedError(_response.error.body);
                case 404:
                    throw new Speechify.tts.NotFoundError(_response.error.body);
                case 500:
                    throw new Speechify.tts.InternalServerError(_response.error.body);
                default:
                    throw new errors.SpeechifyError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SpeechifyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SpeechifyTimeoutError("Timeout exceeded when calling GET /v1/voices/{id}/sample.");
            case "unknown":
                throw new errors.SpeechifyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SPEECHIFY_API_KEY"];
        if (bearer == null) {
            throw new errors.SpeechifyError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a SPEECHIFY_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
